${ProjName}:
SPI_Wakeup_Master


Intended purpose:
To demonstrate low power mode wakeup of a slave lpc8xx, by its on-chip SPI,
using externally generated SPI activity by a master lpc8xx. 
Current consumption can be measured on the slave, if desired.


Functional description:
* For the master project, user input/output is through the debug UART, which is configured in
  Serial.c. Connect a terminal emulator (set to 9600/8/N/1) to the appropriate VCOM or USB
  COM port.
  
* The slave project communicates with the master via SPI.
  
* When the master project runs, the user is prompted to enter '0', '1', or '2'
  to put the slave into Sleep, Deep-sleep, or Power-down mode, respectively.

* The slave board's target enters the low power mode selected, and is awakened by an SPI transfer
  generated by the master board, when the user types 'Esc' after a prompt.


External connections:
* The master and slave boards must be connected as per the pins defined in the main c files
  and SWM settings, as described below:

  // SPI0 (master board)       ... connect to ... SPI0(slave board)
  // SPI0_SCK on master board  ... connect to ... SPI0_SCK on slave board
  // SPI0_MOSI on master board ... connect to ... SPI0_MOSI on slave board
  // SPI0_SSEL on master board ... connect to ... SPI0_SSEL on slave board


Program Flow (Master board):
* This example runs at 30 MHz.
  See function SystemInit() in the startup code.

* main() routine
  1. Clocks are enabled. 
  
  2. The SWM is configured for SPI0 SCK, MOSI, and SSEL.
  
  3. SPI0 and its clocking are configured for 115200 bps, master mode, RXIGNORE = true, 8 data bits,
     and code execution enters the main while(1) loop.
 
  4. The user is prompted to enter '0', '1', or '2' followed by [Enter], to put the slave into one of the low power modes
     (Sleep, Deep-sleep, or Power-down respectively).
  
  5. Either '0', '1', or '2' is transmitted by SPI0 (received data in SPI0 RXDAT is ignored).
  
  6. The user is prompted to type [Esc] to wake up the slave.
  
  7. One byte is transmitted by SPI0, which wakes up the slave, and the process repeats.

  
This example runs from Flash. 


To run this code: 1. Build
                  2. Debug
                  3. Reset the previously programmed slave board
                  4. Run or Go
                  OR:
				  1. Program to flash
				  2. Reset the master board
				  3. Reset the slave board

Note: It may be necessary to power-cycle the board in order to regain control of the reset button after programming.

                                



