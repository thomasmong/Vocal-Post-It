${ProjName}:
Periph_PLU


Intended purpose:
Using the PLU tool, this example demonstrates the configuration and use of the Programmable Logic Unit (PLU) 
The PLU tool can be downloaded from nxp.com

Functional description:
A pre-defined schematics (PLU_example_1_drawing pdf file in the \Source_Code\periph_plu\docs folder) is provided 
to demonstrate the glue logic of the application.
Based on the schematics, PLU tool is used to generate the source code of the PLU design, 
then, the PLU code is copied and pasted to your application along with the I/O configuration of the PLU to build an user application.

A LPCXpresso804 PLU shield board is required to run this application. On the board, a number of 
switches are used act as PLU inputs and LEDs are used to monitor the PLU outputs. Due to the limited
number of pins on the chip/board, some of the inputs and outputs are shared.

This example does not use a Flip Flop. 
To use a Flip Flop, the PIO0_1 must be driven externally by the oscillator on the PLU shield board

PLU 	IN0(A)		p0.0
PLU		IN1(B)		p0.1	(This pin can driven by the oscillator on the PLU shield board or by manually toggling the pin)
PLU		IN2(C)		p0.10
PLU		IN3(D)		p0.11
PLU		IN4(E)		p0.4
PLU		IN5(F)		p0.13

PLU 	OUT0		p0.7
PLU		OUT1		p0.15
PLU		OUT2		p0.16
PLU		OUT3		p0.10
PLU 	OUT4		p0.18
PLU		OUT5		p0.12
PLU		OUT6		p0.20
PLU		OUT7		p0.14


External connections:
* PLU shield board is required.
* Refer to Jumper settings.pdf file under docs for Jumper connections on LPC804 and the PLU shield board. 


Detailed Program Flow:
* This example runs at 30 MHz.
  See function SystemInit() and chip_setup.h.


* main() routine
   1. Turn on clocks to peripherals
   2. Configure the SWM for PLU inputs, outputs, and clock input.
   3. PLU Source code is generated by the PLU tool and copied over. 
   4. PLU is free running while all other peripheral driver such as
Multi-timer blinky example can be expanded at the end of the PLU code,
just before the last while (1). 
  
This example runs from Flash. 


To run this code: 1. Build
                  2. Load to flash
                  3. Reset
              or:
                  1. Build
                  2. Download and Debug
                  3. Run or Go


Note: It may be necessary to power-cycle the board in order to regain control of the reset button after programming.





